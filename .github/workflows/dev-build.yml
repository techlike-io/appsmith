name: Dev CI

# 1
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the dev branch
  push:
    branches: [main]
    # paths: # The combined paths of 
    #   - "app/client/**"
    #   - "!app/client/cypress/manual_TestSuite/**"
    #   - "app/server/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: "Image version"
        required: true
#2
env:
  REGISTRY: registry.digitalocean.com/techlike-container-registry
  IMAGE_NAME: appsmith-ce
  CLUSTER_ID: ff032b81-7311-4d8c-ba4b-88a1dee97ced
  HELM_RELEASE_NAME: appsmith
  HELM_RELEASE_NAMESPACE: appsmith-server-dev

jobs:
  prelude:
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.get_version.outputs.tag }}
      is_beta: ${{ steps.get_version.outputs.is_beta }}

    steps:
      - name: Environment details
        run: |
          echo "PWD: $PWD"
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_SHA: $GITHUB_SHA"
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"

      - name: Get the version
        id: get_version
        run: |
          tag="${GITHUB_REF#refs/tags/}"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          if [[ $tag == *"beta"* ]]; then
            echo "is_beta=true" >> $GITHUB_OUTPUT
          else
            echo "is_beta=false" >> $GITHUB_OUTPUT
          fi

  client-build:
    needs:
      - prelude

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: app/client
        shell: bash

    steps:
      # Checkout the code
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js 16.14.0
        uses: actions/setup-node@v3
        with:
          node-version: "16.14.0"

      # Retrieve npm dependencies from cache. After a successful run, these dependencies are cached again
      - name: Cache npm dependencies
        uses: actions/cache@v3
        env:
          cache-name: cache-yarn-dependencies
        with:
          # npm dependencies are stored in `~/.m2` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Create the bundle
        env:
          REACT_APP_ENVIRONMENT: "PRODUCTION"
          REACT_APP_FUSIONCHARTS_LICENSE_KEY: "${{ secrets.APPSMITH_FUSIONCHARTS_LICENSE_KEY }}"
          REACT_APP_SEGMENT_CE_KEY: "${{ secrets.APPSMITH_SEGMENT_CE_KEY }}"
          REACT_APP_VERSION_ID: "${{ needs.prelude.outputs.tag }}"
          REACT_APP_INTERCOM_APP_ID: "${{ secrets.APPSMITH_INTERCOM_ID }}"
          REACT_APP_VERSION_EDITION: "Community"
        run: |
          REACT_APP_VERSION_RELEASE_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')" \
            yarn build
          ls -l build

      # Upload the build artifact so that it can be used by the test & deploy job in the workflow
      - name: Upload react build bundle
        uses: actions/upload-artifact@v3
        with:
          name: client-build
          path: app/client/build/

  server-build:
    needs:
      - prelude

    defaults:
      run:
        working-directory: app/server

    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Retrieve maven dependencies from cache. After a successful run, these dependencies are cached again
      - name: Cache maven dependencies
        uses: actions/cache@v3
        env:
          cache-name: cache-maven-dependencies
        with:
          # maven dependencies are stored in `~/.m2` on Linux/macOS
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Test and Build package
        working-directory: app/server
        run: |
          mvn --batch-mode versions:set \
            -DnewVersion=${{ needs.prelude.outputs.tag }} \
            -DgenerateBackupPoms=false \
            -DprocessAllModules=true
          ./build.sh -DskipTests
          ls -l dist

      - name: Upload server build bundle
        uses: actions/upload-artifact@v3
        with:
          name: server-build
          path: app/server/dist/

  rts-build:
    needs:
      - prelude

    defaults:
      run:
        working-directory: app/rts

    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js 16.14.0
        uses: actions/setup-node@v3
        with:
          node-version: "16.14.0"

      - name: Build
        run: |
          echo 'export const VERSION = "${{ needs.prelude.outputs.tag }}"' > src/version.js
          yarn build

      # Tar the bundles to speed up the upload & download process
      - name: Tar the rts bundles
        run: |
          ls -al dist/node_modules/@shared/ast
          tar -cvf rts-dist.tar dist

      # Upload the build artifacts and dependencies so that it can be used by the test & deploy job in other workflows
      - name: Upload rts build bundle
        uses: actions/upload-artifact@v3
        with:
          name: rts-dist
          path: app/rts/rts-dist.tar

  package:
    needs: [prelude, client-build, server-build, rts-build]

    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout the merged commit
        uses: actions/checkout@v3

      - name: Download the client build artifact
        uses: actions/download-artifact@v3
        with:
          name: client-build
          path: app/client/build

      - name: Download the server build artifact
        uses: actions/download-artifact@v3
        with:
          name: server-build
          path: app/server/dist

      - name: Download the rts build artifact
        uses: actions/download-artifact@v3
        with:
          name: rts-dist
          path: app/rts/dist

      - name: Untar the rts folder
        run: |
          tar -xvf app/rts/dist/rts-dist.tar -C app/rts/
          echo "Cleaning up the tar files"
          rm app/rts/dist/rts-dist.tar

      - name: Build container image
        run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):latest --build-arg APPSMITH_SEGMENT_CE_KEY=${{ secrets.APPSMITH_SEGMENT_CE_KEY }} .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Remove all old images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Push image to DigitalOcean Container Registry as latest image
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):latest

      - name: Configure kubectl to point to the dev instance
        run: doctl kubernetes cluster kubeconfig save $CLUSTER_ID

      - name: Deploy the new image to the dev namespace
        run: kubectl rollout restart statefulset $HELM_RELEASE_NAME --namespace $HELM_RELEASE_NAMESPACE

      
      # - name: Login to DockerHub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # - name: Build and push fat image
      #   uses: depot/build-push-action@v1
      #   with:
      #     context: .
      #     push: true
      #     platforms: linux/arm64,linux/amd64
      #     build-args: |
      #       APPSMITH_SEGMENT_CE_KEY=${{ secrets.APPSMITH_SEGMENT_CE_KEY }}
      #     tags: |
      #       ${{ secrets.DOCKER_HUB_ORGANIZATION }}/appsmith-ce:${{needs.prelude.outputs.tag}}